<tool id="gffread" name="gffread" version="@VERSION@.1">
  <!--This tool descriptor has been annotated by ToolDog v0.3.1-->
  <description>Filters and/or converts GFF3/GTF2 records</description>
  <edam_operations>
    <edam_operation>operation_3800</edam_operation>
    <edam_operation>operation_3198</edam_operation>
    <edam_operation>operation_3258</edam_operation>
  </edam_operations>
  <edam_topics>
    <edam_topic>topic_3320</edam_topic>
    <edam_topic>topic_3308</edam_topic>
    <edam_topic>topic_3170</edam_topic>
  </edam_topics>
  <stdio>
    <exit_code level="fatal" range="1:"/>
  </stdio>
  <version_command/>
  <command><![CDATA[

    #if $reference_genome.source == 'history':
        ln -s '$reference_genome.genome_fasta' genomeref.fa &&
    #end if
    gffread '$input'
    #if $reference_genome.source == 'cached':
        -g '${reference_genome.fasta_indexes.fields.path}'
        #if $reference_genome.ref_filtering and str($reference_genome.ref_filtering) != '':
            #echo ' '.join(str($reference_genome.ref_filtering).split(','))
        #end if
    #elif $reference_genome.source == 'history':
        -g genomeref.fa
        #if $reference_genome.ref_filtering and str($reference_genome.ref_filtering) != '':
            #echo ' '.join(str($reference_genome.ref_filtering).split(','))
        #end if
    #end if
    #if $filtering and str($filtering) != '':
        #echo " "
        #echo ' '.join(str($filtering).split(','))
    #end if
    #if $maxintron and $maxintron > 0:
        -i $maxintron
    #end if
    #if $region.region_filter == 'filter':
        -r '$region.range' $region.discard_partial
    #end if
    #if $merging.merge_sel != 'none':
        $merging.merge_cmd
        #if $merging.merge_options:
            #echo ' '.join(str($merging.merge_options).split(','))
        #end if
    #end if
    #if $chr_replace:
        -m '$chr_replace'
    #end if
    ##
    ## Although documented, does not appear to be used in the gffread code
    ## #if $seq_info:
    ##     -A -s "$seq_info"
    ## #end if
    ##
    ## outputs
    #if $reference_genome.source != 'none':
        #if $reference_genome.fa_outputs and str($reference_genome.fa_outputs) != '':
            #echo ' ' + ' '.join(str($reference_genome.fa_outputs).split(','))
        #end if
    #end if
    #if $gffs.gff_fmt != 'none':
        #if $gffs.tname:
            -t '$gffs.tname'
        #end if
        #if $gffs.gff_fmt == 'gff':
            #if $input.datatype.file_ext == 'gft':
                $gffs.ensembl
            #end if
            $gffs.output_cmd
        #elif $gffs.gff_fmt == 'gtf':
            $gffs.output_cmd
        #end if
    #end if

    ]]></command>
  <inputs>
    <param argument="input" format="gff3,gtf" label="Input GFF3 or GTF feature file" name="input" type="data"/>
    <param argument="filtering" display="checkboxes" label="filters" multiple="true" name="filtering" type="select">
      <option value="-U">discard single-exon transcripts (-U)</option>
      <option value="-C">coding only: discard mRNAs that have no CDS feature (-C)</option>
      <option value="-G">only parse additional exon attributes from the first exon and move them to the mRNA level (useful for GTF input) (-G)</option>
      <option value="-O">process also non-transcript GFF records (by default non-transcript records are ignored) (-O)</option>
      <option value="--no-pseudo">filter out records matching the 'pseudo' keyword (--no-pseudo)</option>
    </param>
    <conditional argument="region" label="Author did not provide help for this parameter... " name="region">
      <param argument="region_filter" label="Filter by genome region" name="region_filter" type="select">
        <option value="none">No</option>
        <option value="filter">Yes</option>
      </param>
      <when value="none"/>
      <when value="filter">
        <param area="false" argument="range" label="Only show transcripts overlapping coordinate range" name="range" type="text" value=""/>
        <param argument="discard_partial" checked="false" falsevalue="" help="(-R)" label="Discard all transcripts that are not fully contained within the given range" name="discard_partial" truevalue="-R" type="boolean"/>
      </when>
    </conditional>
    <param argument="maxintron" help="If set, discard transcripts having an intron larger (-i max_intron)" label="Filter out transcipts with large introns" min="0" name="maxintron" optional="true" type="integer" value=""/>
    <param argument="chr_replace" format="tabular" label="Replace reference sequence names" name="chr_replace" optional="true" type="data"/>
    <conditional argument="merging" label="Author did not provide help for this parameter... " name="merging">
      <param argument="merge_sel" help="(-M/--merge or --cluster-only)" label="Transcript merging" name="merge_sel" type="select">
        <option value="none">none</option>
        <option value="merge">merge: cluster the input transcripts into loci, collapsing matching transcripts</option>
        <option value="cluster">cluster-only: merge but without collapsing matching transcripts</option>
      </param>
      <when value="none"/>
      <when value="merge"/>
      <when value="cluster"/>
    </conditional>
    <conditional argument="reference_genome" label="Author did not provide help for this parameter... " name="reference_genome">
      <param argument="source" help="(-g genome.fasta) NOTE: Required for fasta outputs" label="Reference Genome" name="source" type="select">
        <option value="none">none</option>
        <option value="cached">None</option>
        <option value="history">From your history</option>
      </param>
      <when value="none"/>
      <when value="cached">
        <param argument="fasta_indexes" label="Source FASTA Sequence" name="fasta_indexes" type="select">
          <options from_data_table="all_fasta"/>
        </param>
      </when>
      <when value="history">
        <param argument="genome_fasta" format="fasta" label="Genome Reference Fasta" name="genome_fasta" type="data"/>
      </when>
    </conditional>
    <conditional argument="gffs" label="Author did not provide help for this parameter... " name="gffs">
      <param argument="gff_fmt" help="(-o output.gff3|output.gtf)" label="Feature File Output" name="gff_fmt" type="select">
        <option value="none">none</option>
        <option value="gff">GFF</option>
        <option value="gtf">GTF</option>
      </param>
      <when value="none"/>
      <when value="gff">
        <param argument="ensembl" checked="false" falsevalue="" help="(-L)" label="Ensembl GTF to GFF3 conversion" name="ensembl" truevalue="-L" type="boolean"/>
      </when>
      <when value="gtf"/>
    </conditional>
    <param argument="full_gff_attribute_preservation" checked="false" falsevalue="" help="(-F)" label="full GFF attribute preservation (all attributes are shown)" name="full_gff_attribute_preservation" truevalue="-F" type="boolean"/>
    <param argument="decode_url" checked="false" falsevalue="" help="(-D)" label="decode url encoded characters within attributes" name="decode_url" truevalue="-D" type="boolean"/>
    <param argument="expose" checked="false" falsevalue="" help="(-E)" label="warn about duplicate transcript IDs and other potential problems with the given GFF/GTF records" name="expose" truevalue="-E" type="boolean"/>
  </inputs>
  <outputs>
    <data format="gff3" from_work_dir="output.gff3" hidden="false" label="${tool.name} on ${on_string}: gff3" metadata_source="input" name="output_gff">
      <filter>gffs['gff_fmt'] == 'gff'</filter>
    </data>
    <data format="gtf" from_work_dir="output.gtf" hidden="false" label="${tool.name} on ${on_string}: gtf" metadata_source="input" name="output_gtf">
      <filter>gffs['gff_fmt'] == 'gtf'</filter>
    </data>
    <data format="fasta" from_work_dir="exons.fa" hidden="false" label="${tool.name} on ${on_string}: exons.fa" name="output_exons">
      <filter>'fa_outputs' in reference_genome and str(reference_genome['fa_outputs']).find('exons.fa') &gt; 0 </filter>
    </data>
    <data format="fasta" from_work_dir="cds.fa" hidden="false" label="${tool.name} on ${on_string}: cds.fa" name="output_cds">
      <filter>'fa_outputs' in reference_genome and str(reference_genome['fa_outputs']).find('cds.fa')  &gt; 0</filter>
    </data>
    <data format="fasta" from_work_dir="pep.fa" hidden="false" label="${tool.name} on ${on_string}: pep.fa" name="output_pep">
      <filter>'fa_outputs' in reference_genome and str(reference_genome['fa_outputs']).find('pep.fa')  &gt; 0</filter>
    </data>
    <data format="txt" from_work_dir="dupinfo" hidden="false" label="${tool.name} on ${on_string}: dupinfo" name="output_dupinfo">
      <filter>'merge_options' in merging and merging['merge_options'].find('dupinfo') &gt; 0</filter>
    </data>
  </outputs>
  <tests>
    <test>
      <param ftype="gtf" name="input" value="Homo_sapiens.GRCh37_19.71.gtf"/>
      <param name="gff_fmt" value="gff"/>
      <output file="Homo_sapiens.GRCh37_19.71.gff3" ftype="gff3" lines_diff="2" name="output_gff"/>
    </test>
    <test>
      <param ftype="gtf" name="input" value="Homo_sapiens.GRCh37_19.71.gtf"/>
      <param name="filtering" value="--no-pseudo"/>
      <param name="gff_fmt" value="gtf"/>
      <output name="output_gtf"/>
    </test>
    <test>
      <param ftype="gtf" name="input" value="Homo_sapiens.GRCh37_19.71.gtf"/>
      <param name="region_filter" value="filter"/>
      <param name="range" value="19:496500..504965"/>
      <param name="gff_fmt" value="gtf"/>
      <output name="output_gtf"/>
    </test>
    <test>
      <param ftype="gtf" name="input" value="Homo_sapiens.GRCh37_19.71.gtf"/>
      <param name="region_filter" value="filter"/>
      <param name="range" value="19:496500..504965"/>
      <param name="discard_partial" value="true"/>
      <param name="gff_fmt" value="gtf"/>
      <output name="output_gtf"/>
    </test>
    <test>
      <param ftype="gtf" name="input" value="Homo_sapiens.GRCh37_19.71.gtf"/>
      <param name="filtering" value="-C"/>
      <param name="region_filter" value="filter"/>
      <param name="range" value="19:496500..504965"/>
      <param name="gff_fmt" value="gtf"/>
      <output name="output_gtf"/>
    </test>
    <test>
      <param ftype="gtf" name="input" value="Homo_sapiens.GRCh37_19.71.gtf"/>
      <param name="source" value="history"/>
      <param ftype="fasta" name="genome_fasta" value="Homo_sapiens.GRCh37.71.dna.chromosome.19.fa"/>
      <param name="fa_outputs" value="-w exons.fa,-x cds.fa,-y pep.fa"/>
      <param name="region_filter" value="filter"/>
      <param name="range" value="19:496500..504965"/>
      <param name="gff_fmt" value="gtf"/>
      <output name="output_gtf"/>
      <output name="output_exons"/>
      <output name="output_cds"/>
      <output name="output_pep"/>
    </test>
  </tests>
  <help><![CDATA[

**gffread   Filters and/or converts GFF3/GTF2 records**

The gffread command is distributed with the cufflinks_ package.

.. _cufflinks: http://cole-trapnell-lab.github.io/cufflinks/

Usage: ::

 gffread "input_gff" [-g "genomic_seqs_fasta" | "dir"][-s "seq_info.fsize"]
   [-o "outfile.gff"] [-t "tname"] [-r [["strand"]"chr":]"start".."end" [-R]]
   [-CTVNJMKQAFGUBHZWTOLE] [-w "exons.fa"] [-x "cds.fa"] [-y "tr_cds.fa"]
   [-i "maxintron"]

Options: ::

  -g  full path to a multi-fasta file with the genomic sequences
      for all input mappings, OR a directory with single-fasta files
      (one per genomic sequence, with file names matching sequence names)
  -s  <seq_info.fsize> is a tab-delimited file providing this info
      for each of the mapped sequences:
      <seq-name> <seq-length> <seq-description>
      (useful for -A option with mRNA/EST/protein mappings)
  -i  discard transcripts having an intron larger than <maxintron>
  -r  only show transcripts overlapping coordinate range <start>..<end>
      (on chromosome/contig <chr>, strand <strand> if provided)
  -R  for -r option, discard all transcripts that are not fully
      contained within the given range
  -U  discard single-exon transcripts
  -C  coding only: discard mRNAs that have no CDS feature
  -F  full GFF attribute preservation (all attributes are shown)
  -G  only parse additional exon attributes from the first exon
      and move them to the mRNA level (useful for GTF input)
  -A  use the description field from <seq_info.fsize> and add it
      as the value for a 'descr' attribute to the GFF record

  -O  process also non-transcript GFF records (by default non-transcript
      records are ignored)
  -V  discard any mRNAs with CDS having in-frame stop codons
  -H  for -V option, check and adjust the starting CDS phase
      if the original phase leads to a translation with an
      in-frame stop codon
  -B  for -V option, single-exon transcripts are also checked on the
      opposite strand
  -N  discard multi-exon mRNAs that have any intron with a non-canonical
      splice site consensus (i.e. not GT-AG, GC-AG or AT-AC)
  -J  discard any mRNAs that either lack initial START codon
      or the terminal STOP codon, or have an in-frame stop codon
      (only print mRNAs with a fulll, valid CDS)
  --no-pseudo: filter out records matching the 'pseudo' keyword

  -M/--merge : cluster the input transcripts into loci, collapsing matching
       transcripts (those with the same exact introns and fully contained)
  -d <dupinfo> : for -M option, write collapsing info to file <dupinfo>
  --cluster-only: same as --merge but without collapsing matching transcripts
  -K  for -M option: also collapse shorter, fully contained transcripts
      with fewer introns than the container
  -Q  for -M option, remove the containment restriction:
      (multi-exon transcripts will be collapsed if just their introns match,
      while single-exon transcripts can partially overlap (80%))

  --force-exons: make sure that the lowest level GFF features are printed as
      "exon" features
  -E  expose (warn about) duplicate transcript IDs and other potential
      problems with the given GFF/GTF records
  -D  decode url encoded characters within attributes
  -Z  merge close exons into a single exon (for intron size<4)
  -w  write a fasta file with spliced exons for each GFF transcript
  -x  write a fasta file with spliced CDS for each GFF transcript
  -W  for -w and -x options, also write for each fasta record the exon
      coordinates projected onto the spliced sequence
  -y  write a protein fasta file with the translation of CDS for each record
  -L  Ensembl GTF to GFF3 conversion (implies -F; should be used with -m)
  -m  <chr_replace> is a reference (genomic) sequence replacement table with
      this format:
      <original_ref_ID> <new_ref_ID>
      For example from UCSC naming to Ensembl naming:
      chr1	1
      chr2	2
      GFF records on reference sequences that are not found among the
      <original_ref_ID> entries in this file will be filtered out
  -o  the "filtered" GFF records will be written to <outfile.gff>
      (use -o- for printing to stdout)
  -t  use <trackname> in the second column of each GFF output line
  -T  -o option will output GTF format instead of GFF3


    ]]></help>
  <citations>
    <citation type="doi">10.1038/nbt.1621</citation>
  </citations>
</tool>
