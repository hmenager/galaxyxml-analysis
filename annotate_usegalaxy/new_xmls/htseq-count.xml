<tool id="htseq_count" name="htseq-count" version="0.6.1galaxy3">
  <!--This tool descriptor has been annotated by ToolDog v0.3.1-->
  <description> - Count aligned reads in a BAM file that overlap features in a GFF file</description>
  <edam_operations>
    <edam_operation>operation_0004</edam_operation>
  </edam_operations>
  <edam_topics>
    <edam_topic>topic_0003</edam_topic>
  </edam_topics>
  <requirements>
    <requirement type="package" version="0.6.1.post1">htseq</requirement>
    <requirement type="package" version="1.3.1">samtools</requirement>
  </requirements>
  <stdio>
    <exit_code level="fatal" range="1:"/>
  </stdio>
  <version_command>htseq-count -h | grep version | sed 's/^\(.*\)*\(version .*\)\./\2/'</version_command>
  <command><![CDATA[
    ##set up input files
    #set $reference_fasta_filename = "localref.fa"
    #if $samout_conditional.samout == "Yes":
        #if str( $samout_conditional.reference_source.reference_source_selector ) == "history":
            ln -s "${samout_conditional.reference_source.ref_file}" "${reference_fasta_filename}" &&
            samtools faidx '${reference_fasta_filename}' 2>&1 || echo "Error running samtools faidx for htseq-count" >&2 &&
        #else:
            #set $reference_fasta_filename = str( $samout_conditional.reference_source.ref_file.fields.path )
        #end if
    #end if

    #if $force_sort == "True":
        #if $samfile.extension == 'bam':
            samtools sort -n -o 'name_sorted_alignment.bam' '$samfile' &&
        #else
            samtools view -Su -t '${reference_fasta_filename}.fai' '$samfile' | samtools sort -n -o 'name_sorted_alignment.bam' - &&
        #end if
    #end if

    htseq-count
        --mode=$mode
        --stranded=$stranded
        --minaqual=$minaqual
        --type='$featuretype'
        --idattr='$idattr'
    #if $samout_conditional.samout == "Yes":
        --samout='$__new_file_path__/${samoutfile.id}_tmp'
    #end if
    #if $force_sort == "True":
        --order=name
        --format=bam
        name_sorted_alignment.bam
    #else
        --order=pos
        --format=$samfile.extension
        '$samfile'
    #end if

    "$gfffile" | awk '{if ($1 ~ "no_feature|ambiguous|too_low_aQual|not_aligned|alignment_not_unique") print $0 | "cat 1>&2"; else print $0}'
         > '$counts'
        2> '$othercounts'

    #if $samout_conditional.samout == "Yes":
        && samtools view -Su
            -t '${reference_fasta_filename}.fai'
            '$__new_file_path__/${samoutfile.id}_tmp'
        | samtools sort -o '$samoutfile' -
    #end if
    
    ]]></command>
  <inputs>
    <param argument="samfile" format="sam,bam" label="Aligned SAM/BAM File" name="samfile" type="data"/>
    <param argument="gfffile" format="gff" label="GFF File" name="gfffile" type="data"/>
    <param argument="mode" label="Mode" name="mode" type="select">
      <option selected="true" value="union">Union</option>
      <option value="intersection-strict">Intersection (strict)</option>
      <option value="intersection-nonempty">Intersection (nonempty)</option>
    </param>
    <param argument="stranded" label="Stranded" name="stranded" type="select">
      <option selected="true" value="yes">Yes</option>
      <option value="no">No</option>
      <option value="reverse">Reverse</option>
    </param>
    <param argument="minaqual" label="Minimum alignment quality" name="minaqual" type="integer" value="10"/>
    <param area="false" argument="featuretype" label="Feature type" name="featuretype" type="text" value="exon"/>
    <param area="false" argument="idattr" label="ID Attribute" name="idattr" type="text" value="gene_id"/>
    <conditional argument="samout_conditional" label="Author did not provide help for this parameter... " name="samout_conditional">
      <param argument="samout" label="Additional BAM Output" name="samout" type="select">
        <option selected="true" value="No">Do not output additional BAM file</option>
        <option value="Yes">Output additional BAM file</option>
      </param>
      <when value="Yes">
        <conditional argument="reference_source" label="Author did not provide help for this parameter... " name="reference_source">
          <param argument="reference_source_selector" label="Choose the source for the reference list" name="reference_source_selector" type="select">
            <option value="cached">Locally cached</option>
            <option value="history">History</option>
          </param>
          <when value="cached">
            <param argument="ref_file" label="Using reference genome" name="ref_file" type="select">
              <options from_data_table="sam_fa_indexes">
                <filter column="1" key="dbkey" ref="samfile" type="data_meta"/>
              </options>
            </param>
          </when>
          <when value="history">
            <param argument="ref_file" format="fasta" label="Using reference file" name="ref_file" type="data"/>
          </when>
        </conditional>
      </when>
      <when value="No"/>
    </conditional>
    <param argument="force_sort" checked="false" falsevalue="False" label="Force sorting of SAM/BAM file by NAME" name="force_sort" truevalue="True" type="boolean"/>
  </inputs>
  <outputs>
    <data format="tabular" hidden="false" label="${tool.name} on ${on_string}" metadata_source="samfile" name="counts"/>
    <data format="tabular" hidden="false" label="${tool.name} on ${on_string} (no feature)" metadata_source="samfile" name="othercounts"/>
    <data format="bam" hidden="false" label="${tool.name} on ${on_string} (BAM)" metadata_source="samfile" name="samoutfile">
      <filter>samout_conditional['samout'] == "Yes"</filter>
    </data>
  </outputs>
  <tests>
    <test>
      <param name="samfile" value="htseq-test.sam"/>
      <param name="gfffile" value="htseq-test.gff"/>
      <param name="samout" value="No"/>
      <output file="htseq-test_counts.tsv" name="counts"/>
      <output file="htseq-test_othercounts.tsv" name="othercounts"/>
    </test>
    <test>
      <param name="samfile" value="htseq-test.sam"/>
      <param name="gfffile" value="htseq-test.gff"/>
      <param name="samout" value="No"/>
      <param name="force_sort" value="True"/>
      <output file="htseq-test_counts.tsv" name="counts"/>
      <output file="htseq-test_othercounts.tsv" name="othercounts"/>
    </test>
    <test>
      <param name="samfile" value="htseq-test.bam"/>
      <param name="gfffile" value="htseq-test.gff"/>
      <param name="samout" value="No"/>
      <output file="htseq-test_counts.tsv" name="counts"/>
      <output file="htseq-test_othercounts.tsv" name="othercounts"/>
    </test>
    <test>
      <param name="samfile" value="htseq-test-paired.bam"/>
      <param name="singlepaired" value="paired"/>
      <param name="gfffile" value="htseq-test.gff"/>
      <param name="samout" value="No"/>
      <output file="htseq-test-paired_counts.tsv" name="counts"/>
      <output file="htseq-test-paired_othercounts.tsv" name="othercounts"/>
    </test>
    <test>
      <param name="samfile" value="htseq-test-paired.bam"/>
      <param name="singlepaired" value="paired"/>
      <param name="gfffile" value="htseq-test.gff"/>
      <param name="samout" value="No"/>
      <param name="force_sort" value="True"/>
      <output file="htseq-test-paired_counts.tsv" name="counts"/>
      <output file="htseq-test-paired_othercounts.tsv" name="othercounts"/>
    </test>
    <test>
      <param name="samfile" value="htseq-test.sam"/>
      <param name="gfffile" value="htseq-test.gff"/>
      <param name="samout" value="Yes"/>
      <param name="reference_source_selector" value="history"/>
      <param name="ref_file" value="htseq-test_reference.fasta"/>
      <output file="htseq-test_counts.tsv" name="counts"/>
      <output file="htseq-test_othercounts.tsv" name="othercounts"/>
      <output file="htseq-test_samout.bam" name="samoutfile"/>
    </test>
  </tests>
  <help><![CDATA[

Overview
--------

This tool takes an alignment file in SAM or BAM format and feature file in GFF format
and calculates the number of reads mapping to each feature. It uses the *htseq-count*
script that is part of the HTSeq python module. See
http://www-huber.embl.de/users/anders/HTSeq/doc/count.html for details.

A feature is an interval (i.e., a range of positions) on a chromosome or a union of
such intervals.  In the case of RNA-Seq, the features are typically genes, where
each gene is considered here as the union of all its exons. One may also consider
each exon as a feature, e.g., in order to check for alternative splicing. For
comparative ChIP-Seq, the features might be binding regions from a pre-determined
list.


Overlap Modes
-------------

Special care must be taken to decide how to deal with reads that overlap more than one feature.

The htseq-count script allows to choose between three modes: *union*, *intersection-strict*, and *intersection-nonempty*.

The following figure illustrates the effect of these three modes:

.. image:: count_modes.png


Strandedness
------------

**Important**: The default for strandedness is yes. If your RNA-Seq data has not been made with a strand-specific protocol, this causes half of the reads to be lost. Hence, make sure to set the option Stranded to 'No' unless you have strand-specific data!


Output
------

The script outputs a table with counts for each feature, followed by the special counters, which count reads that were not counted for any feature for various reasons, namely

- *no_feature*: reads which could not be assigned to any feature (set S as described above was empty).

- *ambiguous*: reads which could have been assigned to more than one feature and hence were not counted for any of these (set S had mroe than one element).

- *too_low_aQual*: reads which were not counted due to the -a option, see below

- *not_aligned*: reads in the SAM file without alignment

- *alignment_not_unique*: reads with more than one reported alignment. These reads are recognized from the NH optional SAM field tag. (If the aligner does not set this field, multiply aligned reads will be counted multiple times.)


Options Summary
---------------

Usage: htseq-count [options] sam_file gff_file

This script takes an alignment file in SAM format and a feature file in GFF
format and calculates for each feature the number of reads mapping to it. See
http://www-huber.embl.de/users/anders/HTSeq/doc/count.html for details.

Options:
  -h, --help            show this help message and exit
  -m MODE, --mode=MODE  mode to handle reads overlapping more than one
                        feature(choices: union, intersection-strict,
                        intersection-nonempty; default: union)
  -s STRANDED, --stranded=STRANDED
                        whether the data is from a strand-specific assay.
                        Specify 'yes', 'no', or 'reverse' (default: yes).
                        'reverse' means 'yes' with reversed strand
                        interpretation
  -a MINAQUAL, --minaqual=MINAQUAL
                        skip all reads with alignment quality lower than the
                        given minimum value (default: 0)
  -t FEATURETYPE, --type=FEATURETYPE
                        feature type (3rd column in GFF file) to be used, all
                        features of other type are ignored (default, suitable
                        for Ensembl GTF files: exon)
  -i IDATTR, --idattr=IDATTR
                        GFF attribute to be used as feature ID (default,
                        suitable for Ensembl GTF files: gene_id)
  -o SAMOUT, --samout=SAMOUT
                        write out all SAM alignment records into an output SAM
                        file called SAMOUT, annotating each line with its
                        feature assignment (as an optional field with tag
                        'XF')
  -q, --quiet           suppress progress report and warnings

Written by Simon Anders (sanders@fs.tum.de), European Molecular Biology
Laboratory (EMBL). (c) 2010. Released under the terms of the GNU General
Public License v3. Part of the 'HTSeq' framework.

    ]]></help>
  <citations>
    <citation type="doi">10.1093/bioinformatics/btu638</citation>
  </citations>
</tool>
