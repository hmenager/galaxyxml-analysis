<tool id="samtools_stats" name="Stats" version="2.0.1">
  <!--This tool descriptor has been annotated by ToolDog v0.3.0-->
  <description>generate statistics for BAM dataset</description>
  <edam_operations>
    <edam_operation>operation_3184</edam_operation>
    <edam_operation>operation_2426</edam_operation>
  </edam_operations>
  <edam_topics>
    <edam_topic>topic_0003</edam_topic>
  </edam_topics>
  <stdio>
    <exit_code level="fatal" range="1:"/>
  </stdio>
  <version_command/>
  <command><![CDATA[
        #if $use_reference.use_ref_selector == "yes":
            #if $use_reference.reference_source.reference_source_selector == "history":
               ln -s '${use_reference.reference_source.ref_file}' &&
               samtools faidx `basename '${use_reference.reference_source.ref_file}'` &&
            #end if
        #end if

        samtools stats
            '${input_file}'
            --coverage ${coverage_min},${coverage_max},${coverage_step}
            ${remove_dups}

            #if str( $filter_by_flags.filter_flags ) == "filter":
                #if $filter_by_flags.require_flags:
                    --required-flag ${sum([int(flag) for flag in str($filter_by_flags.require_flags).split(',')])}
                #end if
                #if $filter_by_flags.exclude_flags:
                    --filtering-flag ${sum([int(flag) for flag in str($filter_by_flags.exclude_flags).split(',')])}
                #end if
            #end if

            --GC-depth ${gc_depth}
            --insert-size ${insert_size}

            ## The code below is commented out because using -I/--id options causes the following exception
            ## Samtools-htslib: init_group_id() header parsing not yet implemented
            ##if str($read_group) != "":
            ##    -I "${read_group}"
            ##end if

            #if str($read_length):
                --read-length ${read_length}
            #end if

            --most-inserts ${most_inserts}
            --trim-quality ${trim_quality}

            #if $use_reference.use_ref_selector == "yes":
                #if $use_reference.reference_source.reference_source_selector != "history":
                    --ref-seq '${use_reference.reference_source.ref_file.fields.path}'
                #else:
                    --ref-seq '${use_reference.reference_source.ref_file}'
                #end if
            #end if
            > '${output}'

        #if $split_output.split_output_selector == "yes":
            #set outputs_to_split = str($split_output.generate_tables).split(',')
            && mkdir split &&
            echo ${split_output.generate_tables}

            #if 'sn' in $outputs_to_split:
                && echo "# Summary Numbers" > 'split/Summary numbers.tab' &&
                echo "" >> 'split/Summary numbers.tab' &&
                if grep -q ^SN '${output}'; then
                    grep ^SN '${output}' | cut -f 2- >> 'split/Summary numbers.tab';
                fi
            #end if

            #if 'ffq' in $outputs_to_split:
                && echo "# Columns correspond to qualities and rows to cycles. First column is the cycle number\n" > 'split/First Fragment Qualities.tab' &&
                if grep -q ^FFQ '${output}'; then
                    grep ^FFQ '${output}' | cut -f 2- >> 'split/First Fragment Qualities.tab';
                fi
            #end if

            #if 'lfq' in $outputs_to_split:
                && echo "# Columns correspond to qualities and rows to cycles. First column is the cycle number" > 'split/Last Fragment Qualities.tab' &&
                if grep -q ^LFQ '${output}'; then
                    grep ^LFQ '${output}' | cut -f 2- >> 'split/Last Fragment Qualities.tab';
                fi
            #end if

            #if 'mpc' in $outputs_to_split:
                && echo "# Columns correspond to qualities, rows to cycles. First column is the cycle number, second is the number of N's and the rest is the number of mismatches" > 'split/Mismatches per cycle.tab' &&
                if grep -q ^MPC '${output}'; then
                    grep ^MPC '${output}' | cut -f 2- >> 'split/Mismatches per cycle.tab';
                fi
            #end if

            #if 'gcf' in $outputs_to_split:
                && echo "# GC Content of first fragments" > 'split/GC Content of first fragments.tab' &&
                if grep -q ^GCF '${output}'; then
                    grep ^GCF '${output}' | cut -f 2- >> 'split/GC Content of first fragments.tab';
                fi
            #end if

            #if 'gcl' in $outputs_to_split:
                && echo "# GC Content of last fragments" > 'split/GC Content of last fragments.tab' &&
                if grep -q ^GCL '${output}'; then
                    grep ^GCL '${output}' | cut -f 2- >> 'split/GC Content of last fragments.tab';
                fi
            #end if

            #if 'gcc' in $outputs_to_split:
                && echo "# ACGT content per cycle. The columns are: cycle, and A,C,G,T counts (percent)" > 'split/ACGT content per cycle.tab' &&
                if grep -q ^GCC '${output}'; then
                    grep ^GCC '${output}' | cut -f 2- >> 'split/ACGT content per cycle.tab';
                fi
            #end if

            #if 'is' in $outputs_to_split:
                && echo "# Insert sizes. The columns are: insert size, pairs total, inward oriented pairs, outward oriented pairs, other pairs" > 'split/Insert sizes.tab' &&
                if grep -q ^IS '${output}'; then
                    grep ^IS '${output}' | cut -f 2- >> 'split/Insert sizes.tab';
                fi
            #end if

            #if 'rl' in $outputs_to_split:
                && echo "# Read lengths. The columns are: read length, count" > 'split/Read lengths.tab' &&
                if grep -q ^RL '${output}'; then
                    grep ^RL '${output}' | cut -f 2- >> 'split/Read lengths.tab';
                fi
            #end if

            #if 'id' in $outputs_to_split:
                && echo "# Indel distribution. The columns are: length, number of insertions, number of deletions" > 'split/Indel distribution.tab' &&
                if grep -q ^ID '${output}'; then
                    grep ^ID '${output}' | cut -f 2- >> 'split/Indel distribution.tab';
                fi
            #end if

            #if 'ic' in $outputs_to_split:
                && echo "# Indels per cycle. The columns are: cycle, number of insertions (fwd), .. (rev) , number of deletions (fwd), .. (rev)" > 'split/Indels per cycle.tab' &&
                if grep -q ^IC '${output}'; then
                    grep ^IC '${output}' | cut -f 2- >> 'split/Indels per cycle.tab';
                fi
            #end if

            #if 'cov' in $outputs_to_split:
                && echo "# Coverage distribution" > 'split/Coverage distribution.tab' &&
                if grep -q ^COV '${output}'; then
                    grep ^COV '${output}' | cut -f 2- >> 'split/Coverage distribution.tab';
                fi
            #end if

            #if 'gcd' in $outputs_to_split:
                && echo "# GC-depth. The columns are: GC%, unique sequence percentiles, 10th, 25th, 50th, 75th and 90th depth percentile" > 'split/GC depth.tab' &&
                if grep -q ^GCD '${output}'; then
                    grep ^GCD '${output}' | cut -f 2- >> 'split/GC depth.tab';
                fi
            #end if
        #end if
        ]]></command>
  <inputs>
    <param argument="input_file" format="sam,bam" label="BAM file" name="input_file" type="data"/>
    <param argument="coverage_min" help="Minimum coverage" label="Minimum coverage" name="coverage_min" type="integer" value="1"/>
    <param argument="coverage_max" help="Maximum coverage" label="Maximum coverage" name="coverage_max" type="integer" value="1000"/>
    <param argument="coverage_step" help="Step value for coverage" label="Coverage step" name="coverage_step" type="integer" value="1"/>
    <param argument="remove_dups" checked="False" falsevalue="" label="Exclude reads marked as duplicates" name="remove_dups" truevalue="--remove-dups" type="boolean"/>
    <conditional argument="split_output" label="Author did not provide help for this parameter... " name="split_output">
      <param argument="split_output_selector" help="Select between one single output or separate outputs for each statistics" label="Output" name="split_output_selector" type="select">
        <option selected="true" value="no">One single summary file</option>
        <option value="yes">Separate datasets for each statistic</option>
      </param>
      <when value="no"/>
      <when value="yes">
        <param argument="generate_tables" display="checkboxes" label="Desired output files" multiple="True" name="generate_tables" type="select">
          <option value="sn">Summary numbers</option>
          <option value="ffq">First Fragment Qualities</option>
          <option value="lfq">Last Fragment Qualities</option>
          <option value="mpc">Mismatches per cycle</option>
          <option value="gcf">GC Content of first fragments</option>
          <option value="gcl">GC Content of last fragments</option>
          <option value="gcc">ACGT content per cycle</option>
          <option value="is">Insert sizes</option>
          <option value="rl">Read lengths</option>
          <option value="id">Indel distribution</option>
          <option value="ic">Indels per cycle</option>
          <option value="cov">Coverage distribution</option>
          <option value="gcd">GC depth</option>
        </param>
      </when>
    </conditional>
    <conditional argument="filter_by_flags" label="Author did not provide help for this parameter... " name="filter_by_flags">
      <param argument="filter_flags" help="More info on the flags: https://samtools.github.io/hts-specs/SAMv1.pdf" label="Filter by SAM flags" name="filter_flags" type="select">
        <option selected="true" value="nofilter">Do not filter</option>
        <option value="filter">Filter by flags to exclude or require</option>
      </param>
      <when value="filter">
        <param argument="require_flags" display="checkboxes" label="Require" multiple="True" name="require_flags" type="select">
          <option value="1">Read is paired</option>
          <option value="2">Read is mapped in a proper pair</option>
          <option value="4">The read is unmapped</option>
          <option value="8">The mate is unmapped</option>
          <option value="16">Read strand</option>
          <option value="32">Mate strand</option>
          <option value="64">Read is the first in a pair</option>
          <option value="128">Read is the second in a pair</option>
          <option value="256">The alignment or this read is not primary</option>
          <option value="512">The read fails platform/vendor quality checks</option>
          <option value="1024">The read is a PCR or optical duplicate</option>
        </param>
        <param argument="exclude_flags" display="checkboxes" label="Exclude" multiple="True" name="exclude_flags" type="select">
          <option value="1">Read is paired</option>
          <option value="2">Read is mapped in a proper pair</option>
          <option value="4">The read is unmapped</option>
          <option value="8">The mate is unmapped</option>
          <option value="16">Read strand</option>
          <option value="32">Mate strand</option>
          <option value="64">Read is the first in a pair</option>
          <option value="128">Read is the second in a pair</option>
          <option value="256">The alignment or this read is not primary</option>
          <option value="512">The read fails platform/vendor quality checks</option>
          <option value="1024">The read is a PCR or optical duplicate</option>
        </param>
      </when>
      <when value="nofilter"/>
    </conditional>
    <param argument="gc_depth" help="Decreasing bin size increases memory requirement" label="Size of GC-depth bins" name="gc_depth" type="float" value="20000"/>
    <param argument="insert_size" label="Maximum insert size" name="insert_size" type="integer" value="8000"/>
    <param argument="read_length" help="No cutoff if left empty" label="Minimum read length to generate statistics for" name="read_length" optional="true" type="integer" value=""/>
    <param argument="most_inserts" label="Report only the main part of inserts" name="most_inserts" type="float" value="0.99"/>
    <param argument="trim_quality" label="BWA trim parameter" name="trim_quality" type="integer" value="0"/>
    <conditional argument="use_reference" label="Author did not provide help for this parameter... " name="use_reference">
      <param argument="use_ref_selector" help="Required for GC-depth and mismatches-per-cycle calculation" label="Use reference sequence" name="use_ref_selector" type="select">
        <option value="yes">Use reference</option>
        <option selected="true" value="no">Do not use reference</option>
      </param>
      <when value="yes">
        <conditional argument="reference_source" label="Author did not provide help for this parameter... " name="reference_source">
          <param argument="reference_source_selector" label="Choose a reference sequence for GC depth" name="reference_source_selector" type="select">
            <option value="cached">Locally cached</option>
            <option value="history">History</option>
          </param>
          <when value="cached">
            <param argument="ref_file" label="Using genome" name="ref_file" type="select">
              <options from_data_table="fasta_indexes">
                <filter column="1" key="dbkey" ref="input_file" type="data_meta"/>
              </options>
            </param>
          </when>
          <when value="history">
            <param argument="ref_file" format="fasta" label="Using file" name="ref_file" type="data"/>
          </when>
        </conditional>
      </when>
      <when value="no"/>
    </conditional>
  </inputs>
  <outputs>
    <data format="tabular" hidden="false" label="${tool.name} on ${on_string}" name="output">
      <discover_datasets directory="split" ext="tabular" pattern="(?P&lt;designation&gt;.+)\.tab" visible="true"/>
    </data>
  </outputs>
  <tests>
    <test>
      <param ftype="bam" name="input_file" value="samtools_stats_input.bam"/>
      <param name="use_ref_selector" value="yes"/>
      <param name="reference_source_selector" value="history"/>
      <param ftype="fasta" name="ref_file" value="samtools_stats_ref.fa"/>
      <output file="samtools_stats_out1.tab" ftype="tabular" lines_diff="4" name="output"/>
    </test>
    <test>
      <param ftype="bam" name="input_file" value="samtools_stats_input.bam"/>
      <param name="use_ref_selector" value="yes"/>
      <param name="reference_source_selector" value="history"/>
      <param ftype="fasta" name="ref_file" value="samtools_stats_ref.fa"/>
      <param name="split_output_selector" value="yes"/>
      <param name="generate_tables" value="sn,mpc,gcc"/>
      <output file="samtools_stats_out2.tab" lines_diff="4" name="output"/>
    </test>
  </tests>
  <help><![CDATA[
**What it does**

This tool runs the ``samtools stats`` command.
    ]]></help>
  <citations>
    <citation type="doi">10.1093/bioinformatics/btp352</citation>
  </citations>
</tool>
